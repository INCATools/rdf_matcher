#!/usr/bin/env swipl

:- initialization main.

:- use_module(library(rdf_matcher)).
:- use_module(library(rdf_matcher/rule_inference)).

:- use_module(library(main)).
:- use_module(library(optparse)).
:- use_module(library(option)).
:- use_module(library(md5)).

:- use_module(library(sparqlprog/io_utils)).
:- use_module(library(sparqlprog/owl_util)).
%:- use_module(library(rule_eval)).
:- use_module(library(index_util)).

:- use_module(library(sparqlprog/labelutils)).
:- use_module(library(semweb/rdf_library)).
:- use_module(library(semweb/rdf_http_plugin)).
:- use_module(library(semweb/rdf_cache)).
:- use_module(library(semweb/rdf_zlib_plugin)).
:- use_module(library(semweb/rdf11)).
:- use_module(library(semweb/rdfs)).
:- use_module(library(semweb/turtle)).

:- rdf_register_prefix(external_resource, 'http://example.org/external_resource/').


% note: when we switc to swipl 7.8 consider using new stack options
%:- set_prolog_flag(stack_limit,'0G').
%:- set_prolog_stack(global, limit(1)).

% TODO: make configurable
:- rdf_set_cache_options([ global_directory('RDF-Cache'),
                           create_global_directory(true)
                         ]).

main(Argv) :-
        catch(wmain(Argv),
              E,
              (   format(user_error,'~q~n',[E]),
                  halt(1))),
        halt.

wmain(Argv) :-
        Spec =
        [
         [opt(output), type(atom),
          longflags(['output']),
          shortflags([o]),
          help('Outfile')
         ],
         [opt(format), type(atom),
          longflags(['format']),
          shortflags([f]),
          help('Output format: csv')
         ],
         [opt(input), type(atom),
          longflags([input]),
          shortflags([i]),
          help('Input RDF file (use in combo with -x)')
         ],
         [opt(termfile), type(atom),
          longflags([terms]),
          shortflags([t]),
          help('File with list of terms, newline delimited')
         ],
         [opt(termlist), type(atom),
          longflags([termlist]),
          help('list of terms, pipe delimited')
         ],
         [opt(indexdir), type(atom),
          longflags(['indexdir']),
          shortflags(['X']),
          default(none),
          help('path to directory to be used for materializing index')
         ],
         [opt(refresh_index), type(boolean),
          default(false),
          longflags([refresh]),
          help('clears index')
         ],
         [opt(prefix), type(atom),
          longflags(['prefix']),
          shortflags([p]),
          help('Prefix for which subject_id must match')
         ],
         [opt(match_prefix), type(atom),
          longflags(['match_prefix']),
          help('Prefix for which object_id must match')
         ],
         [opt(prefix_mapping), type(atom),
          longflags(['prefix_mapping']),
          shortflags([m]),
          help('Declare a prefix mapping. The value should be of the form "PREFIX=URIBase"')
         ],
         [opt(rdf_graph), type(atom),
          longflags(['graph']),
          shortflags(['G']),
          help('path to save rdf graph of generated triples')
         ],
         [opt(match_predicate),
          type(term),
          longflags(['predicate']),
          default(owl:equivalentClass),
          help('rdf predicate for asserting triples')
         ],
         [opt(ontology), type(atom),
          longflags(['ontology']),
          help('Prefix of ontology to be compared against; note if using indexes this will be filtered prior')
         ],
         [opt(ontA), type(atom),
          longflags(['ontA']),
          help('Prefix1 of ontology in match (for learning)')
         ],
         [opt(ontB), type(atom),
          longflags(['ontB']),
          help('Prefix2 of ontology in match (for learning)')
         ],
         [opt(goal), type(term),
          longflags([goal]),
          shortflags([g]),
          help('Prolog goal to call')
         ],
         [opt(metadata), type(term),
          longflags([metadata]),
          shortflags(['M']),
          help('metadata')
         ],
         [opt(consult), type(atom),
          longflags([consult]),
          shortflags([c]),
          help('Prolog program to load/consult')
         ],
         [opt(weights), type(atom),
          longflags([weights]),
          shortflags([w]),
          help('Prolog weights file to load/consult')
         ],
         [opt(label_only), type(boolean),
          default(false),
          longflags([label_only]),
          help('only match things with rdfs:label')
         ],
         [opt(include_unmatched), type(boolean),
          default(false),
          longflags([include_unmatched]),
          help('if true, include unmatched')
         ],
         [opt(use), type(atom),
          longflags([use]),
          shortflags([u]),
          help('Prolog module to use')
         ],
         [opt(use_no_import), type(atom),
          longflags([use_no_import]),
          shortflags(['U']),
          help('Prolog module to use, do not import all')
         ],
         [opt(debug), type(term),
          longflags([debug]),
          shortflags([d]),
          help('term passed to debug/1')
         ],
         [opt(attach), type(atom),
          longflags([attach]),
          shortflags(['A']),
          help('rdf_attach_library - path to void.ttl')
         ],
         [opt(service), type(atom),
          longflags([service]),
          shortflags([s]),
          help('name of remote service to query')
         ],
         [opt(inject_labels),
          type(boolean),
          default(false),
          longflags([label]),
          shortflags([l]),
          help('Inject query for rdfs labels into query')
         ],
         [opt(label_predicate),
          type(term),
          default(rdfpred(rdfs:label)),
          longflags([label_predicate]),
          shortflags(['L']),
          help('predicate to use when looking up labels')
         ],
         [opt(obsoletes),
          type(boolean),
          default(false),
          longflags([obsoletes]),
          help('If set, include obsoletes in results')
         ],
         [opt(show),
          type(boolean),
          default(false),
          longflags([show]),
          shortflags(['S']),
          help('Show SPARQL query')
         ],
         [opt(prolog),
          type(boolean),
          default(false),
          longflags([prolog]),
          shortflags(['P']),
          help('Interactive prolog')
         ],
         [opt(interactive),
          type(boolean),
          default(false),
          longflags([interactive]),
          shortflags(['I']),
          help('Interactive prolog')
         ],
         [opt(verbose),
          type(boolean),
          default(false),
          longflags([verbose]),
          shortflags([v]),
          help('Same as --debug sparqlprog')
         ],
         [opt(stacktrace),
          type(boolean),
          default(false),
          longflags([stacktrace]),
          shortflags(['T']),
          help('Shows stack trace on error')
         ],
         [opt(execute),
          type(boolean),
          default(false),
          longflags([execute]),
          shortflags([e]),
          help('Executes query directly in prolog')
         ],
         [opt(query), type(term),
          longflags([query]),
          shortflags([q]),
          help('Prolog query')
         ]
        ],
        opt_parse(Spec, Argv, Opts, Rest, [duplicated_flags(keepall)]),
        handle_opts(Opts),
        debug(rdf_matcher,'Opts = ~q.',[Opts]),
        inject_prefixes,
        get_index_dir(IndexDir,Opts),
        debug(rdf_matcher,'IndexDir = ~q.',[IndexDir]),
        index_pairs(IndexDir),
        opt_if_call(interactive,sparqlprog_shell(Opts),Opts),
        opt_if_call(prolog,prolog_shell(Opts),Opts),
        write_preheader(Opts),
        run(Rest, Opts),
        !,
        debug(info,'Finished!',[]),
        halt.


get_index_dir(IndexDir,Opts) :-
        option(indexdir(IndexDir),Opts,none),
        IndexDir==none,
        !.
get_index_dir(IndexDir,Opts) :-
        option(indexdir(D1),Opts,none),
        rdf_all_graphs_hash(Hash),
        concat_atom([D1,Hash],/,IndexDir),
        (   option(refresh_index(true),Opts),
            exists_directory(IndexDir)
        ->  sformat(Cmd,'rm ~w/*',[IndexDir]),
            shell(Cmd,_)
        ;   true),
        (   \+ exists_directory(IndexDir)
        ->  make_directory_path(IndexDir)
        ;   true).

rdf_all_graphs_hash(Hash) :-
        setof(Hash,G^rdf_graph_property(G, hash(Hash)),Hashes),
        !,
        concat_atom(Hashes,HashesAtom),
        md5_hash(HashesAtom,Hash,[]).
rdf_all_graphs_hash(nohash).

write_preheader(Opts) :-
        member(format(sssom),Opts),
        !,
        cmt('',license,'https://creativecommons.org/publicdomain/zero/1.0/'),
        cmt('',mapping_tool,'https://github.com/cmungall/rdf_matcher'),
        forall((member(metadata(P=V),Opts),nonvar(P)),
               cmt('',P,V)),
        get_time(T),format_time(atom(Date),'%F',T),
        cmt('',mapping_date,Date),
        %forall((member(P=EnvVar,
        %               [creator_id='ORCID']),
        %        get_env(EnvVar,X)),
        %       cmt('',P,X)),
        write_curie_map(Opts).
write_preheader(_).

write_curie_map(_) :-
        setof(P,O^obj_has_prefix(O,P),Ps),
        !,
        write('#curie_map:\n'),
        forall((member(P,Ps),
                rdf_current_ns(P,URI)),
               cmt('  ',P,URI)).
write_curie_map(_).

cmt(Pad,Prop,Val) :-
        format('#~w~w: "~w"~n',[Pad,Prop,Val]).

run([learn|_Args], Opts) :-
        materialize_index(eq_from_match(+,+,-,-,-,+,+)),
        optional(materialize_index(eq_from_shared_xref(+,+,-,+,+))),
        debug(rdf_matcher,'Grounding',[]),
        ground_rules(Rules, Opts),
        debug(rdf_matcher,'Eval rules',[]),
        eval_and_show_rules(Rules).

%run([traindata|_Args], Opts) :-
%        write_evidence(eq_from_match(_,_,_,_,_,_,_)),
%        write_evidence(eq_from_shared_xref(_,_,_,_,_)),
%        write_evidence(equivalent(_,_)).
  
%run([traindata_objs|_Args], Opts) :-
%        write_facts(obj(X)).

%obj(X) :- equivalent(X,_).
%obj(X) :- equivalent(_,X).


run([traindata|_Args], _Opts) :-
        write_facts(eq_from_match(_,_,_,_,_,_,_)),
        write_facts(eq_from_shared_xref(_,_,_,_,_)),
        write_facts(evidence(equivalent(A,B),true), equivalent(A,B)).

run([classify, WeightFile | _Args], Opts) :-
        use_module(library(rule_inference)),
        consult(WeightFile),
        forall(infer_fact(equivalent(X,Y),_,W),
               write_result(eq(X,Y,W,foo),Opts)).
%               format('eq\t~w\t~w\t~w\tlearned~n',[X,Y,W])).

run([list|_Args], _Opts) :-
        forall(obj_has_prefix(O,P),
               format('~w :: ~w~n',[P,O])).

run([save,F|_], _Opts) :-
        rdf_save_turtle(F,[]).


run([anymatch|_Args], Opts) :-
        G = pair_match(X,_,_,_Info),
        write_all_results_old(X,G,Opts).

run([match|_Args], Opts) :-
        G = inter_pair_match(_,_,_,_Info),
        write_all_results(G,Opts).

run([intra_match|_Args], Opts) :-
        G = intra_pair_match(X,_,_,_Info),
        write_all_results_old(X,G,Opts).

run([exact|_Args], Opts) :-
        write_result_wrap(m(c1,c2,c1parents,c2parents,conf,match,info,alt_c1,alt_c2,ignored_c1,ignored_c2),[no_triple(true)|Opts]),
        G = exact_inter_pair_match(X,_,_,_,_,_,_,_,_,_,_),
        write_all_results_old(X,G,Opts).

run([new_match|_Args], Opts) :-
        %G = new_inter_pair_match(X,_,_,_Info),
        G = new_pair_match(X,_,_,_Info),
        write_all_results_old(X,G,Opts).        


run([tri_match|_Args], Opts) :-
        G = tri_match(C1,_C2,_C3,_Info),
        write_all_results_old(C1,G,Opts).        
run([triad_nc|_Args], Opts) :-
        G = new_unique_match_triad_nc(C1,_C2,_C3),
        write_all_results_old(C1,G,Opts).        

run([rightnew_match|_Args], Opts) :-
        G = rightnew_pair_match(X,_,_,_Info),
        write_all_results_old(X,G,Opts).        

run([unique_match|_Args], Opts) :-
        G = new_unique_pair_match(X,_,_,_Info),
        write_all_results_old(X,G,Opts).

run([cluster|_Args], Opts) :-
        materialize_index(new_pair_match(+,+,-,-)),
        %materialize_index(transitive_new_match(+,+)),
        G = transitive_new_match_set_pair(X,_,_),
        write_all_results_old(X,G,Opts).

run([ucluster|_Args], Opts) :-
        materialize_index(new_unique_pair_match(+,+,-,-)),
        %materialize_index(transitive_unique_match(+,+)),
        G = transitive_unique_match_set_member(X,_),
        write_all_results_old(X,G,Opts).

run([trial|_Args], Opts) :-
        materialize_index(new_unique_pair_match(+,+,-,-)),
        G = new_unique_match_triad(X,_,_),
        write_all_results_old(X,G,Opts).

run([nomatch|_Args], Opts) :-
        write_unmatchable(Opts).

% @deprecated
run([unmatched,Pfx,XPfx|_Args], Opts) :-
        G = (unmatched_in(X,Pfx),has_prefix(X,XPfx)),        
        forall((G,obj_label(X,XN)),
               write_result(unmatched(X,XN,Pfx,XPfx),Opts)).
% @deprecated
run([unmatched,Pfx|_Args], Opts) :-
        G = (unmatched_in(X,Pfx),has_prefix(X,XPfx)),        
        forall((G,obj_label(X,XN)),
               write_result(unmatched(X,XN,Pfx,XPfx),Opts)).

% rdfmatch -p x -i /tmp/eq.ttl -X /tmp/ --termlist 'bone' -d index -d rdf_matcher -i tests/data/basic.ttl merge 
run([merge|_], Opts) :-
        G=new,
        forall(obj_has_prefix(C,external_resource),
               merge_into(C,G, [match(true)|Opts])),
        show_turtle(G).

run([query,QA|_], Opts) :-
        atom_to_term(QA,Query,Bindings),
        forall(Query,
               write_result(Query,Opts)).


run([synthesize,Label|_], Opts) :-
        G=new,
        synthesize_class(Label,external_resource,_C,G, [match(true)|Opts]),
        show_turtle(G).

% always use with -X no_index  TODO NO
run([xxxsynthesize, Label|_], Opts) :-
        G=new,
        synthesize_class(Label,_Prefix,_C,G, [match(true)|Opts]),
        show_turtle(G).
run([Cmd|_], _Opts) :-
        format(user_error,'No such cmd: ~w~n',[Cmd]),
        halt(1).

show_turtle(G) :-
        tmp_file(new_classes,File),
        rdf_save_turtle(File,[graph(G)]),
        read_file_to_codes(File, Codes,[]),
        format(Codes).

write_evidence(G) :-
        write_facts(evidence(G,true),G).
write_facts(G) :-
        write_facts(G,G).
write_facts(T,G) :-
        forall(G, format('~q.~n',[T])).


fix_equiv_pred(P,owl:equivalentProperties) :- rdf_global_id(owl:'ObjectProperty',P).

%! write_all_results(+Goal, +Opts:list) is det.
%
% also filters based on Opts
write_all_results(G,Opts) :-
        G =.. [_,Sub,Obj|_],
        debug(rdf_matcher,'goal=~q',[G]),
        forall((obj(Sub),
                \+filter_subject(Sub,Opts),
                G,
                \+filter_object(Obj,Opts)),
               write_result_wrap(G,Opts)),
        (   \+ member(write_unmatched(true),Opts)
        ->  write_unmatchable(Opts)
        ;   true),
        (   option(rdf_graph(RdfFile),Opts),
            nonvar(RdfFile)
        ->  rdf_save_turtle(RdfFile,[graph(match_graph)])
        ;   true).


match_prefix(P,Opts) :-
        setof(P,O^obj_has_prefix(O,P),Ps),
        member(P,Ps),
        \+ ((
             option(match_prefix(Prefix),Opts),
             nonvar(Prefix),
             Prefix\=P)).

        
write_unmatchable(Opts) :-
        forall((obj(Sub),
                \+filter_subject(Sub,Opts),
                has_prefix(Sub,SubSrc),
                match_prefix(ObjSrc,Opts),
                ObjSrc\=SubSrc,
                \+ ((pair_match(Sub,Obj,_,_),
                     \+ filter_object(Obj,Opts)))),
               write_nomatch_row(Sub,ObjSrc,Opts)).

write_nomatch_row(Sub,ObjSrc,Opts) :-
        ensure_curie(Sub,SubId),
        has_prefix(Sub,SubSrc),
        obj_label(Sub,SubLabel),
        entity_category(Sub,SubCat),
        Vals=[
               subject_id=SubId,
               subject_label=SubLabel,
               predicate_id='noMatch',
               object_id=':NO_MATCH',
               object_label='.',
               match_type='Lexical',
               subject_source=SubSrc,
               object_source=ObjSrc,
               mapping_tool=rdf_matcher,
               confidence=0.5,
               subject_match_field='.',
               object_match_field='.',
               subject_category=SubCat,
               object_category='.',
               match_string='.',
               match_category='.',
               comment='no match found'
             ],
        write_vals(Vals,Opts).

%! write_all_results_old(?X, +Goal, +Opts:list) is det.
%
% writes value of X for every Goal
%
% also filters based on Opts
write_all_results_old(X,G,Opts) :-
        debug(rdf_matcher,'Goal=~q',[G]),
        opt_query_constraint_pre(X,PreG,Opts),
        opt_query_constraint_post(X,G,PostG,Opts),
        forall((PreG,G,PostG),
               write_result_wrap(G,Opts)),
        (   option(rdf_graph(RdfFile),Opts),
            nonvar(RdfFile)
        ->  rdf_save_turtle(RdfFile,[graph(match_graph)])
        ;   true).

write_result_wrap(G,Opts) :-
        select(rdf_graph(GF),Opts,Opts2),
        nonvar(GF),
        \+ member(no_triple(true),Opts),
        !,
        write_result_wrap(G,Opts2),
        add_match_to_graph(G,match_graph,Opts2).
write_result_wrap(G,Opts) :-
        member(format(sssom),Opts),
        !,
        write_sssom_row(G,Opts).
write_result_wrap(G,Opts) :-
        select(inject_labels(Inject),Opts,Opts2),
        nonvar(Inject),
        Inject,
        !,
        row_labelify(G,G2),
        write_result_wrap(G2,Opts2).
write_result_wrap(G,Opts) :-
        write_result(G,Opts).

obj_label(X,N) :-
        rdf(X,rdfs:label,N),
        !.
obj_label(_,'') :- !.

infer_confidence(Vals, Conf) :-
        findall(W,((clause(weight(W,Conditions),Body),
                    all_conditions_match(Conditions,Vals,Body))),
                Weights),
        sumlist(Weights,Weight),
        % logit to prob
        Conf is 1/(1+2**(-Weight)).

all_conditions_match([],_,Body) :- Body.
all_conditions_match([C=V|Cs],Vals,Body) :-
        atom_concat(any_,BaseC,C),
        !,
        (   atom_concat(subject_,BaseC,C2)
        ;   atom_concat(object_,BaseC,C2)),
        all_conditions_match([C2=V|Cs],Vals,Body).
all_conditions_match([C|Cs],Vals,Body) :-
        debug(weights,'Checking ~q in ~w against ~q // ~q',[C,Cs,Vals,Body]),
        member(C,Vals),
        all_conditions_match(Cs,Vals,Body).

write_sssom_row(Row,Opts) :-
        Row =.. [_,Sub,Obj,M,Info|_Args],
        Info=info(_,rdf(_,SubP,_SubV)-rdf(_,ObjP,_ObjV),Step),
        ensure_curie(Sub,SubId),
        ensure_curie(Obj,ObjId),
        has_prefix(Sub,SubSrc),
        has_prefix(Obj,ObjSrc),
        obj_label(Sub,SubLabel),
        obj_label(Obj,ObjLabel),
        entity_category(Sub,SubCat),
        entity_category(Obj,ObjCat),
        BaseType='Lexical',
        (   Step=stem
        ->  Types=[BaseType,'Stemming']
        ;   Types=[BaseType]),
        categorize_match(Sub,Obj,MatchCat),
        option(match_predicate(Pred),Opts,owl:equivalentClass),
        Vals1=[
               subject_id=SubId,
               subject_label=SubLabel,
               predicate_id=Pred,
               object_id=ObjId,
               object_label=ObjLabel,
               match_type=Types,
               subject_source=SubSrc,
               object_source=ObjSrc,
               mapping_tool=rdf_matcher,
               confidence=Conf,
               subject_match_field=SubP,
               object_match_field=ObjP,
               subject_category=SubCat,
               object_category=ObjCat,
               match_string=M,
               match_category=MatchCat,
               comment='.'
             ],
        normalize_vals(Vals1,Vals),
        infer_confidence(Vals,Conf),
        write_vals(Vals,Opts),
        !.
write_sssom_row(Row,_Opts) :-
        Row =.. [_,null|_],
        !.
write_sssom_row(Row,_Opts) :-
        format(user_error,'Failed: ~w~n',[Row]).

normalize_vals([],[]).
normalize_vals([C=X|L],[C=Y|L2]) :-
        normalize_val(X,Y),
        !,
        normalize_vals(L,L2).

normalize_val(X,X) :- var(X),!.
normalize_val(X,X) :- is_list(X),!.
normalize_val(X^^_,X) :- !.
normalize_val(X@_,X) :- !.
normalize_val(X,Y) :- ensure_curie(X,Y),!.

:- dynamic is_header_emitted.
write_vals(Vals,Opts) :-
        \+ is_header_emitted,
        !,
        assert(is_header_emitted),
        findall(C,member(C=_,Vals),Cs),
        concat_atom(Cs,'\t',Line),
        write(Line),
        nl,
        write_vals(Vals,Opts).


write_vals([],_) :-
        nl.
write_vals([Val],Opts) :-
        !,
        write_val(Val,Opts),
        nl.
write_vals([Val|Vals],Opts) :-
        !,
        write_val(Val,Opts),
        write('\t'),
        write_vals(Vals,Opts).

write_val(_= (S^^_),_) :-
        !,
        write(S).
write_val(_= (S@_),_) :-
        !,
        write(S).
write_val(_=L,_) :-
        is_list(L),
        !,
        concat_atom(L,'|',V),
        write(V).
write_val(_=V,_) :-
        !,
        ensure_curie(V,V2),
        write(V2).

filter_subject(X,Opts) :-
        option(prefix(Prefix),Opts),
        nonvar(Prefix),
        \+ obj_has_prefix(X,Prefix).
filter_subject(X,Opts) :-
        filter_entity(X,Opts).
filter_object(X,Opts) :-
        option(match_prefix(Prefix),Opts),
        nonvar(Prefix),
        \+ obj_has_prefix(X,Prefix).
filter_object(X,Opts) :-
        filter_entity(X,Opts).
filter_entity(X,Opts) :-
        option(obsoletes(Obs),Opts),
        Obs=false,
        \+ is_not_obsolete(X).
filter_entity(X,Opts) :-
        option(label_only(true),Opts),
        \+ rdf(X,rdfs:label,_).




        

% Unify G with a goal that succeeds
% if X passes criteria specified in Opts.
%
% these are intended to be executed prior to
% matching
opt_query_constraint_pre(X,G,Opts) :-
        option(prefix(Prefix),Opts),
        nonvar(Prefix),
        !,
        G=obj_has_prefix(X,Prefix).
opt_query_constraint_pre(_,true,_).

% as above, but executed after the fact
opt_query_constraint_post(_,G,PostG,Opts) :-
        option(obsoletes(Obs),Opts),
        Obs=false,
        G =.. [_,A,B|_],
        !,
        PostG = (is_not_obsolete(A),is_not_obsolete(B)).
opt_query_constraint_post(_,_,true,_).

is_not_obsolete(X) :-
        \+ ((rdf_is_iri(X),rdf(X,owl:deprecated,_))).

eval_and_show_rules(Rs) :-
        use_module(library(rule_eval)),
        debug(rdf_matcher,'Eval rules: ~q',[Rs]),
        eval_rules(Rs,Pairs),
        debug(rdf_matcher,'Evaled all rules',[]),
        forall(member(P,Pairs),
               show_rule(P)).

:- op(1200, xfy, ::).

show_rule(R-Scores) :-
        memberchk(pr_true(Pr),Scores),
        wrule( Pr::R ),
        format('%% Scores: ~q.~n',[Scores]),
        nl.

wrule(R) :-
        copy_term(R,R2),
        numbervars(R2,0,_,[]),
        format('~q.~n',[R2]).

load_terms_from_file(File) :-
        csv_read_file(File,Rows,[]),
        forall(member(Row,Rows),
               assert_class_from_row(Row)).

make_terms_from_list(AList) :-
        concat_atom(Terms,'|',AList),
        forall(member(T,Terms),
               assert_class_from_row(t(T))).

assert_class_from_row(Row) :-
        Row =.. [_Pred,Term|_],
        rdf_global_id(external_resource:Term,URI),
        rdf_assert(URI,rdfs:label,Term@en),
        rdf_assert(URI,rdf:type,owl:'Class').

add_prefix(X) :-
        concat_atom([Pre,Base],'=',X),
        debug(rdf_matcher,'Registering: ~w = ~w',[Pre,Base]),
        rdf_register_prefix(Pre,Base).

handle_opts(Opts) :-
        opt_if_call(verbose,debug(rdf_matcher),Opts),
        opt_if_call(verbose,debug(index),Opts),
        opt_if_call(verbose,debug(rule_eval),Opts),
        opt_if_call(stacktrace,use_module(library(sparqlprog/stacktrace)),Opts),
        opt_forall(attach(X),rdf_attach_library(X),Opts),
        opt_forall(debug(X),debug(X),Opts),
        opt_forall(use(X),use_module(library(X)),Opts),
        opt_forall(use_no_import(X),use_module(library(X),[]),Opts),
        opt_forall(ontology(Prefix),set_ontology(Prefix),Opts),
        opt_forall(consult(X),consult(X),Opts),
        opt_forall(weights(X),load_weights(X),Opts),
        opt_forall(input(X),rdf_load_wrap(X),Opts),
        opt_forall(termfile(X),load_terms_from_file(X),Opts),
        opt_forall(termlist(X),make_terms_from_list(X),Opts),
        opt_forall(prefix_mapping(X),add_prefix(X),Opts),
        opt_forall(goal(X),X,Opts).


% execute a goal for every ground instance of Template
opt_forall(Template,Goal,Opts) :-
        debug(rdf_matcher,'Running ~q for all ground ~q in ~q',[Goal,Template,Opts]),
        forall((member(Template,Opts),ground(Template)),
               Goal).

opt_if_call(Opt,Goal,Opts) :-
        T =.. [Opt,Var],
        member(T,Opts),
        ground(Var),
        Var=true,
        !,
        Goal.
opt_if_call(_,_,_).

opt_if(T,Opts) :-
        member(T,Opts),
        ground(T),
        !.
opt_if(T,Opts,Opts2) :-
        select(T,Opts,Opts2),
        ground(T),
        !.

optional(G) :- G,!.
optional(_).

load_weights(F) :-
        exists_file(F),
        !,
        consult(F).
load_weights(F) :-
        ensure_loaded(library(rdf_matcher/F)).


rdf_load_wrap(X) :-
        debug(rdf_matcher,'Loading: ~w',[X]),
        catch(rdf_load(X),
              _E,
              rdf_load_library(X)).

% TODO: get from elsewhere
sparqlprog_shell(Opts):-
        format('% Starting pl2sparql shell~n'),
        current_input(IO),
        HFile='.sparqlprog_history',
        (   exists_file(HFile)
        ->  rl_read_history(HFile)
        ;   true),
        repeat,
        read_line_to_codes(IO,Codes),
        (   Codes=end_of_file
        ->  !
        ;   atom_codes(A,Codes),
            rl_add_history(A),
            format('Cmd: ~w~n',[A]),
            concat_atom(L,' ',A),
            catch(run(L,Opts),
                  E,
                  (   format('ERROR:~n~w~n',[E]),fail)),
            format('SUCCESS!~n'),
            rl_write_history(HFile),
            fail).

prolog_shell(_Opts):-
        format('% Starting prolog shell~n'),
        HFile='.plhistory',
        (   exists_file(HFile)
        ->  rl_read_history(HFile)
        ;   true),
        prolog,
        format('% Bye!~n'),
        rl_write_history(HFile),
        halt.


